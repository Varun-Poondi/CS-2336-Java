x^3 + x^2 + x + C
(3/2)x^2 + 4x -x^-1, 1|4 = 35.250
(1/4)x^4 - 2x^2, -2|2 = 0.000

x^3 + x^2 + x + C
(3/2)x^2 + 4x -x^-1, 1|4 = 35.250
(1/4)x^4 - 2x^2, -2|2 = 0.000

x^3 + x^2 + x + C
(3/2)x^2 + 4x -x^-1, 1|4 = 35.250
(1/4)x^4 - 2x^2, -2|2 = 0.000
(-3/11)x^11 + x^4 - 10x^-1 + C


                if(tempExponent < 0 && doubleCoefficient < 0) {
                    coefficient = "(" + (int) doubleCoefficient + "/" + (int) (tempExponent) + ")";
                }else if(tempExponent < 0 && doubleCoefficient > 0 || tempExponent > 0 && doubleCoefficient < 0){
                    coefficient = "(-" + (int) doubleCoefficient + "/" + (int) (tempExponent) + ")";
                }else{
                    coefficient = "(" + (int) doubleCoefficient + "/" + (int) (tempExponent) + ")";
                }
                
                
                
      if(curr.left != null)
      
      
      
BETA TEST CASE 

    1  |   4 1 x ^  -2 + 3 x +  4   dx
    4  |   1 1 x ^  -2 + 3 x +  4   dx
    1  |   5 3 x ^   2 + 2 x +  1   dx
    5  |   1 3 x ^   2 + 2 x +  1   dx
    | 3x^2 + 4x^7 - 4x^7 + 4x^3 + 2x^2 dx
       |    3  x^ 2 - 5x^2 +  2 x + 1  + 2dx
        1  |   4 1 x ^  -2 + 3 x +  4   dx
    -2|2 1x^3 - 4x dx
    | 10x^-2 - 3x^10 + 4x^3 dx
    | 5x^2 + 5x^2 + x^2 - 2x^2 dx
    | 2x^5 - 5x^2 + 5x^2  + 2x - 2x  + 8x^3dx
    | 5x^3 - 5x^3 - 2x^2 + 2x^2 - 8x^20 dx
    | -5x^2 - 5x^2 dx  

INTEGRALS TEST CASES
| 5212x^6 - 385x^4 + 4082x^-3 + 615x^-7 dx
| x^6 + 12x - 1x^-2 - 28x^-8 dx
| 3x^4 + 13x^2 + 5x^-5 + 1 dx
| 22x^10 + x^9 + x^8 + x^6 + 2x^5 + x^3 + x^2 + 4x^-4dx
| -3 dx
| 24x^5 dx
| -48x^-4 - 20x^-5 dx
| 364x^3 + 3x - 3x^-5 dx
| -81x^9 - 73x^8 + 25x^2 + 12x^-10 - 3 dx
| 10x^2 dx
| 10x^10 - 7x^8 + 14x^3 + 27 dx
| 5212x^6 - 385x^4 + 4082x^-3 + 615x^-7 dx
| 2x^5 - 3x^4 + 23x^-2 dx
| 10x^10 - 7x^8 + 14x^3 + 27 dx
| 5212x^6 - 385x^4 + 4082x^-3 + 615x^-7 dx
| 2x^5 - 3x^4 + 23x^2 dx
1|3 4x^4 + 3x + 5x^-3 dx 
2|5 x^2 - 5x + 3x^-2 dx
-1|1 22x^10 + 9x^9 - 5x^4 + 5x + 1 dx
-10|-5 x^5 + 4x^3 - 4x + 4 dx
-2|-1 -x^10 - x^9 - x^8 - x^7 - x^6 + 1x^-6 + 1x^-7 + 1x^-8 + 1x^-9 + 1x^-10 dx


ALPHA FAILING INDEFINITE INTEGRAL TEST CASES
| x^6 + 12x - 1x^-2 - 28x^-8 dx
| -48x^-4 - 20x^-5 dx
| 364x^3 + 3x - 3x^-5 dx


ALPHA DEFINITE INTEGRALS TEST CASES
1|3 4x^4 + 3x + 5x^-3 dx 
2|5 x^2 - 5x + 3x^-2 dx
-1|1 22x^10 + 9x^9 - 5x^4 + 5x + 1 dx
-10|-5 x^5 + 4x^3 - 4x + 4 dx
-2|-1 -x^10 - x^9 - x^8 - x^7 - x^6 + 1x^-6 + 1x^-7 + 1x^-8 + 1x^-9 + 1x^-10 dx


        if(checkLoad.getOperator().equals("-") && this.operator.equals("-")){
            tempCoB = checkLoad.getCoefficient();
            tempCoA = this.coefficient;
            totalCof = tempCoA + tempCoB;
            this.setOperator("-");
            this.setCoefficient(totalCof);
        }else if(checkLoad.getOperator().equals("-") || this.operator.equals("-")){
            if(checkLoad.getOperator().equals("-")){
                tempCoB = checkLoad.getCoefficient() * -1;
                tempCoA = this.coefficient;
            } else {
                tempCoB = checkLoad.getCoefficient();
                tempCoA = this.coefficient * -1;
            }
            totalCof = tempCoA + tempCoB;
            if(totalCof < 0){
                this.setCoefficient(totalCof * -1);
                this.setOperator("-");
            }else{
                this.setCoefficient(totalCof);
                this.setOperator("+");
            }
        } else{
            tempCoB = checkLoad.getCoefficient();
            tempCoA = this.coefficient;
            totalCof = tempCoA + tempCoB;
            this.setCoefficient(totalCof);
            this.setOperator("+");
        }
    }
        public void combinePayLoad(Payload checkLoad){
            double tempCoA;
            double tempCoB;
            double totalCof;
            if(checkLoad.getOperator().equals("-")){  //if the checkLoad's coefficient is negative
                tempCoB = checkLoad.getCoefficient() * -1; //temp becomes a negative number
            }else{
                tempCoB = checkLoad.getCoefficient();
            }
            if(this.operator.equals("-")){  //same thing applies except we are checking for our own coefficient
                tempCoA = coefficient * -1;
            }else{
                tempCoA = coefficient;
            }
            totalCof = tempCoA + tempCoB; //save this value into variable
    
            if(totalCof < 0){
                totalCof *= -1;
                this.setOperator("-");
            }else{
                this.setOperator("+");
            }
    
            this.setCoefficient(totalCof); //set the newCoefficient value. If the coefficient turns out to be 0, then we will delete the node
        }